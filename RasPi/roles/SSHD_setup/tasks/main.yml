- block:
    # Rather hacky way to get a user's home directory, AFAIK there's no cleaner methods to doing so
    - name: Get {{ target_username }}'s home
      shell: "echo $HOME"
      become: true
      become_user: "{{ target_username }}"
      register: username_home

    - name: Check keys
      stat:
        path: "{{ ssh_key_item }}"
      loop:
        - "{{ username_home }}/.ssh/authorized_keys"
        - "{{ ansible_env.HOME }}/.ssh/authorized_keys"
        - "{{ username_home }}/.ssh/id_rsa"
      loop_control:
        loop_var: ssh_key_item
      register: authorized_keys
      changed_when: (not authorized_keys.stat.exists)

    - name: Install cryptography
      pip:
        name: cryptography
        state: latest

    - name: Create the SSH directory
      file:
        path: "{{ username_home.stdout }}/.ssh"
        state: directory
        owner: "{{ target_username }}"
        group: "{{ target_username }}"
        mode: 0700

    - name: Generate new host + user keys, copy login user keys to target
      block:
        - name: Generate /etc/ssh/ host keys
          when: new_ssh_host_keys
          shell: |
            yes | ssh-keygen -q -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""
            yes | ssh-keygen -q -t dsa -f /etc/ssh/ssh_host_dsa_key  -N ""
            yes | ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""
            yes | ssh-keygen -q -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""
          register: host_key

        - name: Generate /etc/ssh/ RSA user keys
          when: >
            new_ssh_user_keys or
            (not authorized_keys.results.2.stat.exists)
          shell: yes | ssh-keygen -q -t rsa -f "{{ username_home.stdout }}/.ssh/id_rsa" -N ""

        - name: Copy existing authorized_keys ({{ target_username }})
          when: (not authorized_keys.results.0.stat.exists) and authorized_keys.results.1.stat.exists
          copy:
            src: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
            dest: "{{ username_home.stdout }}/.ssh/authorized_keys"
            remote_src: true
            owner: "{{ target_username }}"
            group: "{{ target_username }}"
            mode: 0600
            args:
              creates: "{{ username_home.stdout }}/.ssh/authorized_keys"

    - block:
        # - name: Get sshd_config hash
        #   stat: path="/etc/ssh/sshd_config"
        #   register: sshd_stat_before

        - name: Update SSH configuration
          register: ssh_config
          lineinfile:
            dest: "/etc/ssh/sshd_config"
            regexp: "{{ sshd_conf_line.regexp }}"
            line: "{{ sshd_conf_line.line }}"
            state: present
            validate: "sshd -T -f %s"
            mode: 0644
          loop_control:
            loop_var: sshd_conf_line
          loop:
            - regexp: "^#?PasswordAuthentication"
              line: "PasswordAuthentication {{ PasswordAuthentication }}"
            - regexp: "^#?PermitRootLogin"
              line: "PermitRootLogin {{ PermitRootLogin }}"
            - regexp: "^#?Port"
              line: "Port {{ ssh_port }}"
            - regexp: "^#?ClientAliveInterval"
              line: "ClientAliveInterval {{ ClientAliveInterval }}"
            - regexp: "^#?ClientAliveCountMax"
              line: "ClientAliveCountMax {{ ClientAliveCountMax }}"

        # - name: Get sshd_config hash
        #   stat:
        #     path: "/etc/ssh/sshd_config"
        #   register: sshd_stat_after

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
      when: >
        host_key.changed or
        ssh_config.changed
  become: true
